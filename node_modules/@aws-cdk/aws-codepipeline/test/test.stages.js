"use strict";
const assert_1 = require("@aws-cdk/assert");
const cdk = require("@aws-cdk/core");
const codepipeline = require("../lib");
const stage_1 = require("../lib/stage");
module.exports = {
    'Pipeline Stages': {
        'can be inserted before another Stage'(test) {
            const stack = new cdk.Stack();
            const pipeline = new codepipeline.Pipeline(stack, 'Pipeline');
            const secondStage = pipeline.addStage({ stageName: 'SecondStage' });
            pipeline.addStage({
                stageName: 'FirstStage',
                placement: {
                    rightBefore: secondStage,
                },
            });
            assert_1.expect(stack, true).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
                'Stages': [
                    { 'Name': 'FirstStage' },
                    { 'Name': 'SecondStage' },
                ],
            }));
            test.done();
        },
        'can be inserted after another Stage'(test) {
            const stack = new cdk.Stack();
            const pipeline = new codepipeline.Pipeline(stack, 'Pipeline');
            const firstStage = pipeline.addStage({ stageName: 'FirstStage' });
            pipeline.addStage({ stageName: 'ThirdStage' });
            pipeline.addStage({
                stageName: 'SecondStage',
                placement: {
                    justAfter: firstStage,
                },
            });
            assert_1.expect(stack, true).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
                'Stages': [
                    { 'Name': 'FirstStage' },
                    { 'Name': 'SecondStage' },
                    { 'Name': 'ThirdStage' },
                ],
            }));
            test.done();
        },
        "attempting to insert a Stage before a Stage that doesn't exist results in an error"(test) {
            const stack = new cdk.Stack();
            const pipeline = new codepipeline.Pipeline(stack, 'Pipeline');
            const stage = pipeline.addStage({ stageName: 'Stage' });
            const anotherPipeline = new codepipeline.Pipeline(stack, 'AnotherPipeline');
            test.throws(() => {
                anotherPipeline.addStage({
                    stageName: 'AnotherStage',
                    placement: {
                        rightBefore: stage,
                    },
                });
            }, /before/i);
            test.done();
        },
        "attempting to insert a Stage after a Stage that doesn't exist results in an error"(test) {
            const stack = new cdk.Stack();
            const pipeline = new codepipeline.Pipeline(stack, 'Pipeline');
            const stage = pipeline.addStage({ stageName: 'Stage' });
            const anotherPipeline = new codepipeline.Pipeline(stack, 'AnotherPipeline');
            test.throws(() => {
                anotherPipeline.addStage({
                    stageName: 'AnotherStage',
                    placement: {
                        justAfter: stage,
                    },
                });
            }, /after/i);
            test.done();
        },
        'providing more than one placement value results in an error'(test) {
            const stack = new cdk.Stack();
            const pipeline = new codepipeline.Pipeline(stack, 'Pipeline');
            const stage = pipeline.addStage({ stageName: 'Stage' });
            test.throws(() => {
                pipeline.addStage({
                    stageName: 'SecondStage',
                    placement: {
                        rightBefore: stage,
                        justAfter: stage,
                    },
                });
                // incredibly, an arrow function below causes nodeunit to crap out with:
                // "TypeError: Function has non-object prototype 'undefined' in instanceof check"
            }, function (e) {
                return /rightBefore/.test(e) && /justAfter/.test(e);
            });
            test.done();
        },
        'can be retrieved from a pipeline after it has been created'(test) {
            const stack = new cdk.Stack();
            const pipeline = new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'FirstStage',
                    },
                ],
            });
            pipeline.addStage({ stageName: 'SecondStage' });
            test.equal(pipeline.stages.length, 2);
            test.equal(pipeline.stages[0].stageName, 'FirstStage');
            test.equal(pipeline.stages[1].stageName, 'SecondStage');
            // adding stages to the returned array should have no effect
            pipeline.stages.push(new stage_1.Stage({
                stageName: 'ThirdStage',
            }, pipeline));
            test.equal(pipeline.stageCount, 2);
            test.done();
        },
    },
};
//# sourceMappingURL=data:application/json;base64,