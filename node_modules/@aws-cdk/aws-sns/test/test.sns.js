"use strict";
const assert_1 = require("@aws-cdk/assert");
const iam = require("@aws-cdk/aws-iam");
const kms = require("@aws-cdk/aws-kms");
const cdk = require("@aws-cdk/core");
const sns = require("../lib");
module.exports = {
    'topic tests': {
        'all defaults'(test) {
            const stack = new cdk.Stack();
            new sns.Topic(stack, 'MyTopic');
            assert_1.expect(stack).toMatch({
                'Resources': {
                    'MyTopic86869434': {
                        'Type': 'AWS::SNS::Topic',
                    },
                },
            });
            test.done();
        },
        'specify topicName'(test) {
            const stack = new cdk.Stack();
            new sns.Topic(stack, 'MyTopic', {
                topicName: 'topicName',
            });
            assert_1.expect(stack).toMatch({
                'Resources': {
                    'MyTopic86869434': {
                        'Type': 'AWS::SNS::Topic',
                        'Properties': {
                            'TopicName': 'topicName',
                        },
                    },
                },
            });
            test.done();
        },
        'specify displayName'(test) {
            const stack = new cdk.Stack();
            new sns.Topic(stack, 'MyTopic', {
                displayName: 'displayName',
            });
            assert_1.expect(stack).toMatch({
                'Resources': {
                    'MyTopic86869434': {
                        'Type': 'AWS::SNS::Topic',
                        'Properties': {
                            'DisplayName': 'displayName',
                        },
                    },
                },
            });
            test.done();
        },
        'specify kmsMasterKey'(test) {
            const stack = new cdk.Stack();
            const key = new kms.Key(stack, 'CustomKey');
            new sns.Topic(stack, 'MyTopic', {
                masterKey: key,
            });
            assert_1.expect(stack).to(assert_1.haveResource('AWS::SNS::Topic', {
                'KmsMasterKeyId': { 'Ref': 'CustomKey1E6D0D07' },
            }));
            test.done();
        },
        'specify both'(test) {
            const stack = new cdk.Stack();
            new sns.Topic(stack, 'MyTopic', {
                topicName: 'topicName',
                displayName: 'displayName',
            });
            assert_1.expect(stack).toMatch({
                'Resources': {
                    'MyTopic86869434': {
                        'Type': 'AWS::SNS::Topic',
                        'Properties': {
                            'DisplayName': 'displayName',
                            'TopicName': 'topicName',
                        },
                    },
                },
            });
            test.done();
        },
    },
    'can add a policy to the topic'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const topic = new sns.Topic(stack, 'Topic');
        // WHEN
        topic.addToResourcePolicy(new iam.PolicyStatement({
            resources: ['*'],
            actions: ['sns:*'],
            principals: [new iam.ArnPrincipal('arn')],
        }));
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::SNS::TopicPolicy', {
            PolicyDocument: {
                Version: '2012-10-17',
                Statement: [{
                        'Sid': '0',
                        'Action': 'sns:*',
                        'Effect': 'Allow',
                        'Principal': { 'AWS': 'arn' },
                        'Resource': '*',
                    }],
            },
        }));
        test.done();
    },
    'give publishing permissions'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const topic = new sns.Topic(stack, 'Topic');
        const user = new iam.User(stack, 'User');
        // WHEN
        topic.grantPublish(user);
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            'PolicyDocument': {
                Version: '2012-10-17',
                'Statement': [
                    {
                        'Action': 'sns:Publish',
                        'Effect': 'Allow',
                        'Resource': stack.resolve(topic.topicArn),
                    },
                ],
            },
        }));
        test.done();
    },
    'topic resource policy includes unique SIDs'(test) {
        const stack = new cdk.Stack();
        const topic = new sns.Topic(stack, 'MyTopic');
        topic.addToResourcePolicy(new iam.PolicyStatement({
            actions: ['service:statement0'],
            principals: [new iam.ArnPrincipal('arn')],
        }));
        topic.addToResourcePolicy(new iam.PolicyStatement({
            actions: ['service:statement1'],
            principals: [new iam.ArnPrincipal('arn')],
        }));
        assert_1.expect(stack).toMatch({
            'Resources': {
                'MyTopic86869434': {
                    'Type': 'AWS::SNS::Topic',
                },
                'MyTopicPolicy12A5EC17': {
                    'Type': 'AWS::SNS::TopicPolicy',
                    'Properties': {
                        'PolicyDocument': {
                            'Statement': [
                                {
                                    'Action': 'service:statement0',
                                    'Effect': 'Allow',
                                    'Principal': { 'AWS': 'arn' },
                                    'Sid': '0',
                                },
                                {
                                    'Action': 'service:statement1',
                                    'Effect': 'Allow',
                                    'Principal': { 'AWS': 'arn' },
                                    'Sid': '1',
                                },
                            ],
                            'Version': '2012-10-17',
                        },
                        'Topics': [
                            {
                                'Ref': 'MyTopic86869434',
                            },
                        ],
                    },
                },
            },
        });
        test.done();
    },
    'fromTopicArn'(test) {
        // GIVEN
        const stack2 = new cdk.Stack();
        // WHEN
        const imported = sns.Topic.fromTopicArn(stack2, 'Imported', 'arn:aws:sns:*:123456789012:my_corporate_topic');
        // THEN
        test.deepEqual(imported.topicName, 'my_corporate_topic');
        test.deepEqual(imported.topicArn, 'arn:aws:sns:*:123456789012:my_corporate_topic');
        test.done();
    },
    'test metrics'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const topic = new sns.Topic(stack, 'Topic');
        // THEN
        test.deepEqual(stack.resolve(topic.metricNumberOfMessagesPublished()), {
            dimensions: { TopicName: { 'Fn::GetAtt': ['TopicBFC7AF6E', 'TopicName'] } },
            namespace: 'AWS/SNS',
            metricName: 'NumberOfMessagesPublished',
            period: cdk.Duration.minutes(5),
            statistic: 'Sum',
        });
        test.deepEqual(stack.resolve(topic.metricPublishSize()), {
            dimensions: { TopicName: { 'Fn::GetAtt': ['TopicBFC7AF6E', 'TopicName'] } },
            namespace: 'AWS/SNS',
            metricName: 'PublishSize',
            period: cdk.Duration.minutes(5),
            statistic: 'Average',
        });
        test.done();
    },
    'subscription is created under the topic scope by default'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const topic = new sns.Topic(stack, 'Topic');
        // WHEN
        topic.addSubscription({
            bind: () => ({
                protocol: sns.SubscriptionProtocol.HTTP,
                endpoint: 'http://foo/bar',
                subscriberId: 'my-subscription',
            }),
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::SNS::Subscription'));
        test.done();
    },
    'if "scope" is defined, subscription will be created under that scope'(test) {
        // GIVEN
        const app = new cdk.App();
        const stack = new cdk.Stack(app, 'A');
        const stack2 = new cdk.Stack(app, 'B');
        const topic = new sns.Topic(stack, 'Topic');
        // WHEN
        topic.addSubscription({
            bind: () => ({
                protocol: sns.SubscriptionProtocol.HTTP,
                endpoint: 'http://foo/bar',
                subscriberScope: stack2,
                subscriberId: 'subscriberId',
            }),
        });
        // THEN
        assert_1.expect(stack).notTo(assert_1.haveResource('AWS::SNS::Subscription'));
        assert_1.expect(stack2).to(assert_1.haveResource('AWS::SNS::Subscription'));
        test.done();
    },
    'fails if topic policy has no actions'(test) {
        // GIVEN
        const app = new cdk.App();
        const stack = new cdk.Stack(app, 'my-stack');
        const topic = new sns.Topic(stack, 'Topic');
        // WHEN
        topic.addToResourcePolicy(new iam.PolicyStatement({
            resources: ['*'],
            principals: [new iam.ArnPrincipal('arn')],
        }));
        // THEN
        test.throws(() => app.synth(), /A PolicyStatement must specify at least one \'action\' or \'notAction\'/);
        test.done();
    },
    'fails if topic policy has no IAM principals'(test) {
        // GIVEN
        const app = new cdk.App();
        const stack = new cdk.Stack(app, 'my-stack');
        const topic = new sns.Topic(stack, 'Topic');
        // WHEN
        topic.addToResourcePolicy(new iam.PolicyStatement({
            resources: ['*'],
            actions: ['sns:*'],
        }));
        // THEN
        test.throws(() => app.synth(), /A PolicyStatement used in a resource-based policy must specify at least one IAM principal/);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,